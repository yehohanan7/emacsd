#+TITLE: My Emacs Configuration
#+OPTIONS: toc:4 h:4

* Configuration
** Emacs initialization
*** Add load paths
#+begin_src emacs-lisp
(add-to-list 'load-path "~/elisp")
(add-to-list 'load-path "~/elisp/artbollocks-mode")
(add-to-list 'load-path "~/.emacs.d/custom/gog")
(add-to-list 'load-path "~/.emacs.d/custom/emacs-elixir/")
(add-to-list 'load-path "~/.emacs.d/custom/fortunes/")
(add-to-list 'load-path "~/.emacs.d/custom/john/")
(add-to-list 'load-path "~/.emacs.d/slime/")
(add-to-list 'load-path "~/.emacs.d/mu/mu")
(add-to-list 'load-path "~/.emacs.d/mu/mu4e")
(setq org-agenda-files '("~/hyperspace/"))
#+end_src

*** Add package sources
#+begin_src emacs-lisp
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t)
(package-refresh-contents)
#+end_src

Use =M-x package-refresh-contents= to reload the list of packages
after adding these for the first time.

** Load custom modules
#+begin_src emacs-lisp
(require 'fortune)
(require 'gog-json)
#+end_src

** Install use-package if not installed
#+begin_src emacs-lisp
(if (not (package-installed-p 'use-package))
    (progn
      (package-refresh-contents)
      (package-install 'use-package)))
(require 'use-package)
#+end_src

** General configuration
*** Backups
Store backup files under backup 
#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+end_src

Disk space is cheap. Save lots.
#+begin_src emacs-lisp
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src

*** History

From http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html
#+begin_src emacs-lisp
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+end_src

*** Windows configuration
Remove tooltip, toolbar etc
#+begin_src emacs-lisp
(when window-system
  (tooltip-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1))
#+end_src

*** Sentences end with a single space
#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src

*** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :init 
  (progn
    (setq projectile-keymap-prefix (kbd "C-c p"))
    (setq projectile-completion-system 'default)
    (setq projectile-enable-caching t)
    (projectile-global-mode)))

(use-package helm-projectile :ensure t)

(defhydra hydra-projectile ()
  "projectile"
  ("p" helm-projectile-switch-project "switch project")
  ("T" projectile-toggle-between-implementation-and-test "toggle test")
  ("tt" projectile-test-project "run test")
  ("f" helm-projectile-find-file "find file")
  ("d" helm-projectile-find-dir "find dir")
  ("g" helm-projectile-grep "grep")
  ("!" projectile-run-shell-command-in-root "run command")
  ("h" helm-projectile "helm"))

(key-chord-define-global "PP" 'hydra-projectile/body)

#+end_src

*** Helm - interactive completion
#+begin_src emacs-lisp
(use-package helm
  :ensure helm
  :init
  (progn 
    (require 'helm-config) 
    (setq helm-candidate-number-limit 100)
    ;; From https://gist.github.com/antifuchs/9238468
    (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01  ; this actually updates things
          helm-quick-update t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t)
    (helm-mode))
    :config
    (progn
      ;; I don't like the way switch-to-buffer uses history, since
      ;; that confuses me when it comes to buffers I've already
      ;; killed. Let's use ido instead.
      (add-to-list 'helm-completing-read-handlers-alist '(switch-to-buffer . ido))
      ;; Unicode
      (add-to-list 'helm-completing-read-handlers-alist '(insert-char . ido)))
    :bind (("C-c h" . helm-mini)
           ("C-x C-f" . projectile-find-file)
           ("C-h a" . helm-apropos)
           ("M-y" . helm-show-kill-ring)
           ("M-x" . helm-M-x)))

(ido-mode -1)
#+end_src

*** Mode line

Smart line mode
#+begin_src emacs-lisp
(use-package smart-mode-line-powerline-theme :ensure t)
(use-package smart-mode-line
  :init
  (progn
    (setq sml/no-confirm-load-theme t)
    (setq sml/theme 'respectful)
    (sml/setup)))
#+end_src

Hide minor modes I care less about:
#+begin_src emacs-lisp
(use-package diminish :ensure t)
(eval-after-load "yasnippet" '(diminish 'yas-minor-mode))
(eval-after-load "undo-tree" '(diminish 'undo-tree-mode))
(eval-after-load "guide-key" '(diminish 'guide-key-mode))
(eval-after-load "smartparens" '(diminish 'smartparens-mode))
(eval-after-load "guide-key" '(diminish 'guide-key-mode))
(eval-after-load "eldoc" '(diminish 'eldoc-mode))
(diminish 'visual-line-mode)
#+end_src

*** Change "yes or no" to "y or n"
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)   
#+end_src

*** Minibuffer editing - more space!

Sometimes you want to be able to do fancy things with the text
that you're entering into the minibuffer. Sometimes you just want
to be able to read it, especially when it comes to lots of text.
This binds =C-M-e= in a minibuffer) so that you can edit the
contents of the minibuffer before submitting it.
#+begin_src emacs-lisp
  (use-package miniedit
    :ensure miniedit
    :commands minibuffer-edit
    :init (miniedit-install))
#+end_src

*** UTF-8
From http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src
*** exec path
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure exec-path-from-shell
  :init (exec-path-from-shell-initialize))
#+end_src

*** Drag stuff

#+begin_src emacs-lisp
(use-package drag-stuff
  :ensure drag-stuff
  :init 
  (progn 
    (drag-stuff-global-mode 1)
    (add-hook 'org-mode-hook (lambda() (drag-stuff-mode -1)))))

#+end_src

** Themes

#+begin_src emacs-lisp
;(use-package ample-zen-theme :ensure t)
;(use-package zenburn-theme :ensure t)
(use-package yoshi-theme :ensure t)
;(use-package color-theme :ensure t)
;(use-package molokai-theme :ensure t)
;(use-package atom-one-dark-theme :ensure t)
;(use-package github-theme :ensure t)
;(use-package monokai-theme :ensure t)
;(use-package color-theme-solarized-dark :ensure t)
;(use-package pastels-on-dark-theme :ensure t)
#+end_src

** Navigation
*** Text size
#+begin_src emacs-lisp
(bind-key "C-+" 'text-scale-increase)
(bind-key "C--" 'text-scale-decrease)
#+end_src

*** Make window splitting more useful

#+begin_src emacs-lisp
(defun vsplit-last-buffer (prefix)
  "Split the window vertically and display the previous buffer."
  (interactive "p")
  (split-window-vertically)
  (other-window 1 nil)
  (unless prefix
    (switch-to-next-buffer)))

(defun hsplit-last-buffer (prefix)
  "Split the window horizontally and display the previous buffer."
  (interactive "p")
  (split-window-horizontally)
  (other-window 1 nil)
  (unless prefix (switch-to-next-buffer)))

(bind-key "C-x 2" 'vsplit-last-buffer)
(bind-key "C-x 3" 'hsplit-last-buffer)

#+end_src
*** Directory tree
#+begin_src emacs-lisp
(use-package dirtree
  :ensure dirtree)

(use-package neotree
  :ensure neotree
  :config
   (global-set-key [f8] 'neotree-toggle))

#+end_src
*** Recent files
#+begin_src emacs-lisp
(require 'recentf)
(setq recentf-max-saved-items 200
      recentf-max-menu-items 15)
(recentf-mode)
#+end_src
*** Copy filename to clipboard
#+begin_src emacs-lisp
(defun prelude-copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))
#+end_src

** Coding
*** Kill word under cursor
#+begin_src emacs-lisp
(defun kill-word-under-cursor ()
  (interactive)
  (backward-word)
  (kill-word 1))
(subword-mode)
(global-set-key (kbd "M-d") 'kill-word-under-cursor)
#+end_src
*** Tab width of 2 is compact and readable
#+begin_src emacs-lisp
(setq-default tab-width 2)
#+end_src
*** Add new line above/below current cursor
#+begin_src emacs-lisp
(defun smart-open-line ()
  (interactive)
  (move-end-of-line nil)
  (newline-and-indent))

(defun smart-open-line-above ()
  (interactive)
  (move-beginning-of-line nil)
  (newline-and-indent)
  (forward-line -1)
  (indent-according-to-mode))

(global-set-key (kbd "M-o") 'smart-open-line)
(global-set-key (kbd "M-O") 'smart-open-line-above)
#+end_src

#+RESULTS:
: smart-open-line-above

*** New lines are always indented
#+begin_src emacs-lisp
(global-set-key (kbd "RET") 'newline-and-indent)
#+end_src

*** Emacs Lisp
**** Edebug

Did you know edebug has a trace function? I didn't. Thanks, agumonkey!

#+begin_src emacs-lisp
(setq edebug-trace t)
#+end_src

While edebugging, use T to view a trace buffer (=*edebug-trace*=).
Emacs will quickly execute the rest of your code, printing out the
arguments and return values for each expression it evaluates.

**** Eldoc
Eldoc provides minibuffer hints when working with Emacs Lisp.
#+begin_src emacs-lisp
    (autoload 'turn-on-eldoc-mode "eldoc" nil t)
    (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
    (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
    (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
#+end_src
**** Jumping to code
#+begin_src emacs-lisp
(define-key emacs-lisp-mode-map (kbd "C-c .") 'find-function-at-point)
(bind-key "C-c f" 'find-function)
#+end_src
*** Show column number
#+begin_src emacs-lisp
(column-number-mode 1)
#+end_src

*** Don't show whitespace in diff, but show context
#+begin_src emacs-lisp
(setq vc-diff-switches '("-b" "-B" "-u"))
#+end_src
*** Magit - nice git interface
#+begin_src emacs-lisp
(use-package magit
  :ensure magit
  :init
   (progn 
     (setq magit-last-seen-setup-instructions "1.4.0")))

(global-set-key (kbd "C-S-g") #'magit-status)
#+end_src

*** Autocomplete & snippets
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure yasnippet)
(yas-global-mode 1)
(setq yas-snippet-dirs (append yas-snippet-dirs '("~/.emacs.d/snippets")))

#+end_src

*** Yaml mode
#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure yaml-mode)
#+end_src

*** Better defaults
#+begin_src emacs-lisp
(use-package better-defaults
  :ensure better-defaults)
#+end_src

*** Clojure
**** org babel configuration

#+begin_src emacs-lisp
(use-package ob-clojure)
(setq org-babel-clojure-backend 'cider)
#+end_src

**** cider & paredit configs
#+begin_src emacs-lisp
(use-package ob-clojure)

(setq org-babel-clojure-backend 'cider)

(use-package cider
  :ensure cider)

(use-package paredit
  :ensure paredit)

(use-package ac-cider
  :ensure ac-cider)

#+end_src

*** Common lisp

#+begin_src emacs-lisp
(require 'slime-autoloads)

(slime-setup '(slime-repl
               slime-mrepl 
               slime-asdf 
               slime-sprof 
               slime-compiler-notes-tree 
               slime-hyperdoc 
               slime-indentation 
               slime-media 
               slime-fancy)) 
(add-hook 'lisp-mode-hook '(lambda () (paredit-mode)))
#+end_src

*** python
#+begin_src emacs-lisp
(use-package jedi
   :ensure jedi
   :init (progn 
            (add-hook 'python-mode-hook 'jedi:setup)
            (setq jedi:complete-on-dot t)))
#+end_src
    
*** Go
#+begin_src emacs-lisp
(setenv "GOROOT" "/usr/local/go")
(setenv "GOPATH" (concat (getenv "HOME") "/go"))

(use-package go-mode
   :ensure go-mode
   :bind 
    (("C-c C-r" . go-remove-unused-imports)
     ("C-c C-p" . pop-tag-mark)
     ("C-c C-k" . godoc-at-point)))

(use-package go-eldoc
   :ensure go-eldoc)

(use-package go-guru
   :ensure go-guru)

(use-package company :ensure t)

(use-package company-go :ensure t)

(define-key company-active-map (kbd "\C-n") 'company-select-next)
(define-key company-active-map (kbd "\C-p") 'company-select-previous)
(define-key company-active-map (kbd "C-.") 'company-show-location)

(add-hook 'go-mode-hook 
   (lambda () 
     (set (make-local-variable 'company-backends) '(company-go))
     (company-mode)))
(add-hook 'go-mode-hook 'go-eldoc-setup)
(setq gofmt-command "goimports")
(add-hook 'before-save-hook 'gofmt-before-save)


#+end_src

*** ReactJs
#+begin_src emacs-lisp
(use-package flycheck 
  :ensure t)

(use-package web-mode
  :ensure web-mode)

(add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))


(defun my-web-mode-hook ()
  (if (equal web-mode-content-type "javascript")
    (web-mode-set-content-type "jsx")
    (message "now set to: %s" web-mode-content-type))
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2))

(add-hook 'web-mode-hook  'my-web-mode-hook)

#+end_src

#+RESULTS:
** Http
*** Rest client
#+begin_src emacs-lisp
(use-package restclient
  :ensure restclient
  :init (add-to-list 'auto-mode-alist '("\\.http\\'" . restclient-mode)))
#+end_src
** Terminal
*** Multi term
#+begin_src emacs-lisp
(use-package multi-term
  :ensure multi-term)

(defcustom term-unbind-key-list
  '("C-z" "C-x" "C-c" "C-h" "C-y" "<ESC>")
  "The key list that will need to be unbind."
  :type 'list
  :group 'multi-term)

(defcustom term-bind-key-alist
  '(
    ("C-c C-c" . term-interrupt-subjob)
    ("C-p" . previous-line)
    ("C-n" . next-line)
    ("C-s" . isearch-forward)
    ("C-r" . isearch-backward)
    ("C-m" . term-send-raw)
    ("M-f" . term-send-forward-word)
    ("M-b" . term-send-backward-word)
    ("M-o" . term-send-backspace)
    ("M-p" . term-send-up)
    ("M-n" . term-send-down)
    ("M-M" . term-send-forward-kill-word)
    ("M-N" . term-send-backward-kill-word)
    ("M-r" . term-send-reverse-search-history)
    ("M-," . term-send-input)
    ("M-." . comint-dynamic-complete))
    "The key alist that will need to be bind.If you do not like default setup, modify it, with (KEY . COMMAND) format."
  :type 'alist
  :group 'multi-term)

(add-hook 'term-mode-hook
          (lambda ()
            (add-to-list 'term-bind-key-alist '("M-[" . multi-term-prev))
            (add-to-list 'term-bind-key-alist '("M-]" . multi-term-next))))

(add-hook 'term-mode-hook
          (lambda ()
            (add-to-list 'term-bind-key-alist '("C-c C-j" . term-line-mode))
            (add-to-list 'term-bind-key-alist '("C-c C-k" . term-char-mode))))


(add-hook 'term-mode-hook
          (lambda ()
            (define-key term-raw-map (kbd "C-y") 'term-paste)))


;; disable yas mode in terminal
(add-hook 'term-mode-hook (lambda()
                (yas-minor-mode -1)))

#+end_src
*** Start emacs server on startup
#+begin_src emacs-lisp
(server-start)
#+end_src
** Social
*** Internet Relay Chat
   #+begin_src emacs-lisp
     (use-package erc
       :ensure erc
       :config
       (setq erc-autojoin-channels-alist '((
              "#kafka"
              "#lisp"
					    "#emacs"))
	     erc-server "irc.freenode.net"
	     erc-nick "maveneagle"))
   #+end_src

*** Hacker news
#+begin_src emacs-lisp
(use-package hackernews
  :ensure hackernews)
#+end_src
** Utilities
*** External utilities
String Utility
#+begin_src emacs-lisp
(use-package s
  :ensure s)
#+end_src

Name spaces
#+begin_src emacs-lisp
(use-package names
  :ensure names)
#+end_src

*** Custom utilities
#+begin_src emacs-lisp
'(load-file "~/.emacs.d/custom/aws/aws.el")
#+end_src
** Presentation
#+begin_src emacs-lisp
'(use-package org-present
  :ensure org-present)

'(use-package org-presie
  :ensure org-presie)
#+end_src

** Ergonomic
#+begin_src emacs-lisp
(setq ispell-program-name "/usr/local/bin/ispell") ;; ispell path
#+end_src

*** Basics
Replace selected text
#+begin_src emacs-lisp
(delete-selection-mode 1)
#+end_src

copy word/line at point
#+begin_src emacs-lisp
(global-set-key (kbd "C-c C-g")  'goto-line)
#+end_src

Org mode
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((sh . t)))
#+end_src

*** Keychord
enable keychord
#+begin_src emacs-lisp

(key-chord-mode 1)

#+end_src
*** Hydra
#+begin_src emacs-lisp
(use-package hydra :ensure t)
#+end_src

*** Multiple Editing
#+begin_src emacs-lisp

(use-package multiple-cursors :ensure t)
(defhydra hydra-multi-cursor ()
  "multi cursor"
  ("a" mc/mark-all-like-this "all")
  ("l" mc/edit-lines "lines")
  ("n" mc/mark-next-like-this "next")
  ("p" mc/mark-previous-like-this "previous"))

(key-chord-define-global "MM" 'hydra-multi-cursor/body)

#+end_src

*** Between buffer navigation
Switch to buffer
#+begin_src emacs-lisp
(global-set-key (kbd "C-x b") 'helm-projectile-switch-to-buffer)
#+end_src

*** Buffer navigation
Copy entire buffer
#+begin_src emacs-lisp
(global-set-key (kbd "C-S-h") 
  (lambda ()
    "Copy the entire buffer"
    (interactive)
    (kill-ring-save (point-min) (point-max))
    (message "buffer copied")))

#+end_src

Smoother scrolling
#+begin_src emacs-lisp
(use-package smooth-scrolling :ensure t)
(smooth-scrolling-mode 1)
#+end_src

Move faster between lines
#+begin_src emacs-lisp
(global-set-key (kbd "C-S-n") 'forward-paragraph)
(global-set-key (kbd "C-S-p") 'backward-paragraph)

#+end_src

Move faster between words
#+begin_src emacs-lisp
(defun beggining-of-next-word ()
  (interactive)
  (forward-word)
  (forward-char))

(global-set-key (kbd "C-S-f") 'beggining-of-next-word)
(global-set-key (kbd "C-S-b") 'backward-word)
#+end_src

move cursor to the beginning of line
#+begin_src emacs-lisp
(defun back-to-indentation-or-beginning () (interactive)
   (if (= (point) (progn (back-to-indentation) (point)))
       (beginning-of-line)))

(global-set-key (kbd "C-a") 'back-to-indentation-or-beginning)
#+end_src

move to anywhere in the buffer
#+begin_src emacs-lisp
(use-package avy 
  :ensure t
  :bind (("C-:" . avy-goto-char)))

#+end_src

*** Closing buffers
#+begin_src emacs-lisp
(defun kill-other-buffers ()
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+end_src

*** Region operation
#+begin_src emacs-lisp
(use-package expand-region :ensure t)

(key-chord-define-global "UU" 'er/expand-region)
#+end_src

*** Finding things
#+begin_src emacs-lisp
(use-package swiper-helm
  :ensure t
  :bind
  (("C-s" . swiper)))
#+end_src

#+end_src

** DevOps
*** shell
#+begin_src emacs-lisp
(defun eshell/clear ()
  "Clear the eshell buffer."
  (let ((inhibit-read-only t))
    (erase-buffer)
    (eshell-send-input)))
#+end_src

*** Docker mode
#+begin_src emacs-lisp
(use-package dockerfile-mode
  :ensure t
  :init (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
#+end_src

